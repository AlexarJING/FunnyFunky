{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"for",
				"fori	for i,v in ipairs()"
			],
			[
				"getlinew",
				"love.graphics.getLineWidth"
			],
			[
				"setline",
				"love.graphics.setLineWidth"
			],
			[
				"contac",
				"contactList"
			],
			[
				"tab",
				"table.insert	(table, [pos,] value)"
			],
			[
				"new",
				"love.graphics.newShader"
			],
			[
				"material",
				"materialType"
			],
			[
				"getFix",
				"getFixtureList"
			],
			[
				"bullet",
				"bulletPre"
			],
			[
				"rollB",
				"rollback"
			],
			[
				"jump",
				"jumpLeftKey"
			],
			[
				"current",
				"currentProject"
			],
			[
				"curretn",
				"currentScene"
			],
			[
				"newfi",
				"love.filesystem.newFile"
			],
			[
				"create",
				"love.filesystem.createDirectory"
			],
			[
				"newf",
				"love.filesystem.newFile"
			],
			[
				"setPorp",
				"setProperty"
			],
			[
				"jump_",
				"jump_right"
			],
			[
				"talb",
				"table.insert	(table, [pos,] value)"
			],
			[
				"fro",
				"fori	for i,v in ipairs()"
			],
			[
				"set",
				"love.mouse.setCursor"
			],
			[
				"org",
				"love.graphics.origin"
			],
			[
				"clear",
				"love.graphics.clear"
			],
			[
				"neww",
				"love.physics.newWeldJoint"
			],
			[
				"coordi",
				"CoordinateInfo"
			],
			[
				"update",
				"updateTodo"
			],
			[
				"colli",
				"collisionFunc"
			],
			[
				"destroy",
				"destoryOnHit"
			],
			[
				"collision",
				"collisionType"
			],
			[
				"newfil",
				"love.filesystem.newFileData"
			],
			[
				"newim",
				"love.image.newImageData"
			],
			[
				"line",
				"love.graphics.line"
			],
			[
				"push",
				"love.graphics.push"
			],
			[
				"setme",
				"love.physics.setMeter"
			],
			[
				"ro",
				"love.graphics.rotate"
			],
			[
				"newj",
				"love.physics.newWeldJoint"
			],
			[
				"circle",
				"love.physics.newCircleShape"
			],
			[
				"shape",
				"love.physics.newPolygonShape"
			],
			[
				"frag",
				"fragVerts"
			],
			[
				"collisio",
				"collisionType"
			],
			[
				"begin",
				"begin"
			],
			[
				"contact",
				"contactList"
			],
			[
				"upper",
				"UpperLimit"
			],
			[
				"selecet",
				"selectedAnchor"
			],
			[
				"newgr",
				"love.physics.newGearJoint"
			],
			[
				"newF",
				"love.graphics.newFont"
			],
			[
				"setc",
				"love.graphics.setColor"
			],
			[
				"propTa",
				"propTag"
			],
			[
				"propTag",
				"propTagIndex"
			],
			[
				"proptag",
				"propTagIndex"
			],
			[
				"hover",
				"hoverobject"
			],
			[
				"brick",
				"brickW"
			],
			[
				"isdow",
				"love.mouse.isDown"
			],
			[
				"drag",
				"dragTY"
			],
			[
				"dragT",
				"dragTX"
			],
			[
				"changeR",
				"changeNormal"
			],
			[
				"isdonw",
				"love.keyboard.isDown"
			],
			[
				"selectg",
				"selectToggle"
			],
			[
				"selectT",
				"selectToggle"
			],
			[
				"commad",
				"commadName"
			],
			[
				"swithPo",
				"switchPopIndex"
			],
			[
				"switchPo",
				"switchPopTag"
			],
			[
				"ta",
				"table.insert	(table, [pos,] value)"
			],
			[
				"getWorld",
				"getWorldData"
			],
			[
				"isdo",
				"love.keyboard.isDown"
			],
			[
				"selectedV",
				"selectedVerts"
			],
			[
				"selected",
				"selectedVert"
			],
			[
				"selecte",
				"selectedVert"
			],
			[
				"selectedver",
				"selectedVerts"
			],
			[
				"selectedv",
				"selectedVert"
			],
			[
				"isdon",
				"love.keyboard.isDown"
			],
			[
				"obj",
				"objects"
			],
			[
				"shpe",
				"love.physics.newCircleShape"
			],
			[
				"rect",
				"love.graphics.rectangle"
			],
			[
				"position",
				"love.mouse.getPosition"
			],
			[
				"print",
				"love.graphics.print"
			],
			[
				"joint",
				"love.physics.newWeldJoint"
			],
			[
				"load",
				"loadstring	(string [, chunkname])"
			],
			[
				"parent",
				"parent_angle"
			],
			[
				"angle_",
				"angle_a"
			],
			[
				"subb",
				"subBranchToSkyRate"
			],
			[
				"setpont",
				"love.graphics.setPointSize"
			],
			[
				"change",
				"changeStep"
			],
			[
				"setb",
				"love.graphics.setBlendMode"
			],
			[
				"bright",
				"brightness"
			],
			[
				"string",
				"string.format	(formatstring, ...)"
			],
			[
				"setp",
				"love.graphics.setPointStyle"
			],
			[
				"point",
				"love.graphics.point"
			],
			[
				"cir",
				"love.graphics.circle"
			],
			[
				"aura_",
				"aura_inner"
			],
			[
				"math",
				"math.sin	(x)"
			],
			[
				"dra",
				"love.graphics.draw"
			],
			[
				"dr",
				"love.graphics.draw"
			],
			[
				"sha",
				"love.physics.newChainShape"
			],
			[
				"ci",
				"love.graphics.circle"
			],
			[
				"slime",
				"slime_ball"
			],
			[
				"setm",
				"love.physics.setMeter"
			],
			[
				"facotr",
				"factorA"
			],
			[
				"softb",
				"softbodyTable"
			],
			[
				"dista",
				"love.physics.newDistanceJoint"
			],
			[
				"newc",
				"love.physics.newCircleShape"
			],
			[
				"std_",
				"std_item"
			],
			[
				"player",
				"player"
			],
			[
				"key",
				"love.keyboard.isDown"
			],
			[
				"ope",
				"love.system.openURL"
			],
			[
				"os",
				"os.execute	([command])"
			],
			[
				"copy",
				"copyto"
			],
			[
				"newRight",
				"newRightButton"
			],
			[
				"leftselect",
				"leftSelectPosY"
			],
			[
				"leftTop",
				"leftTopX"
			],
			[
				"partsp",
				"partsPosLeft"
			],
			[
				"get",
				"love.mouse.getPosition"
			],
			[
				"mousei",
				"love.mouse.isDown"
			],
			[
				"draw",
				"love.graphics.draw"
			],
			[
				"max",
				"math.max	(x, ...)"
			],
			[
				"flag",
				"flagLast"
			],
			[
				"rand",
				"love.math.random"
			],
			[
				"scre",
				"love.graphics.newScreenshot"
			],
			[
				"canvas",
				"love.graphics.newCanvas"
			],
			[
				"poly",
				"love.graphics.polygon"
			],
			[
				"table",
				"table.insert	(table, [pos,] value)"
			],
			[
				"getLocal",
				"getLocalVelocity"
			],
			[
				"ply",
				"love.graphics.polygon"
			],
			[
				"rando",
				"love.math.random"
			],
			[
				"inmd",
				"love.image.newImageData"
			],
			[
				"fon",
				"love.graphics.newFont"
			],
			[
				"carm",
				"camera"
			],
			[
				"event",
				"love.event.quit"
			]
		]
	},
	"buffers":
	[
		{
			"file": "main.lua",
			"settings":
			{
				"buffer_size": 631,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/Alexar/Desktop/test/skeleton.atlas",
			"settings":
			{
				"buffer_size": 6766,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "local scene = gamestate.new()\n\nlocal stateTab={}\nlocal stateIndex=1\nfor k,v in pairs(skeletonData.animations) do\n	table.insert(stateTab, v.name)\nend\n\nstateData:setMix(\"walk\", \"jump\", 0.2)\nstateData:setMix(\"jump\", \"run\", 0.2)\n-- AnimationState has a queue of animations and can apply them with crossfading.\nlocal boy={}\nboy.state=spine.AnimationState.new(stateData)\nlocal state = boy.state\n-- state:setAnimationByName(0, \"test\")\nstate:setAnimationByName(0, \"walk\", true)\n\n\nstate.onStart = function (trackIndex)\n	print(trackIndex..\" start: \"..state:getCurrent(trackIndex).animation.name)\nend\nstate.onEnd = function (trackIndex)\n	print(trackIndex..\" end: \"..state:getCurrent(trackIndex).animation.name)\nend\nstate.onComplete = function (trackIndex, loopCount)\n	print(trackIndex..\" complete: \"..state:getCurrent(trackIndex).animation.name..\", \"..loopCount)\nend\nstate.onEvent = function (trackIndex, event)\n	print(trackIndex..\" event: \"..state:getCurrent(trackIndex).animation.name..\", \"..event.data.name..\", \"..event.intValue..\", \"..event.floatValue..\", '\"..(event.stringValue or \"\")..\"'\")\nend\n\n\nfunction scene:init()\n	print(\"ok\")\nend \n\nfunction scene:enter()\n	\nend\n\nfunction scene:leave()\n	\nend\n\n\nfunction scene:draw()\n	love.graphics.setColor(255, 255, 255)\n	skeleton:draw()\nend\n\nfunction scene:update(dt)\n	state:update(dt)\n	state:apply(skeleton)\n	skeleton:updateWorldTransform()\nend \n\nfunction scene:keypressed(key)\n	if key==\"space\" then\n		stateIndex=stateIndex+1\n		if stateIndex>#stateTab then stateIndex=1 end\n		state:addAnimationByName(0, stateTab[stateIndex], true)\n	end\nend\n\nreturn scene",
			"file": "scene/game.lua",
			"file_size": 2209,
			"file_write_time": 131087840276148140,
			"settings":
			{
				"buffer_size": 1589,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "-------------------------------------------------------------------------------\n-- Spine Runtimes Software License\n-- Version 2.3\n-- \n-- Copyright (c) 2013-2015, Esoteric Software\n-- All rights reserved.\n-- \n-- You are granted a perpetual, non-exclusive, non-sublicensable and\n-- non-transferable license to use, install, execute and perform the Spine\n-- Runtimes Software (the \"Software\") and derivative works solely for personal\n-- or internal use. Without the written permission of Esoteric Software (see\n-- Section 2 of the Spine Software License Agreement), you may not (a) modify,\n-- translate, adapt or otherwise create derivative works, improvements of the\n-- Software or develop new applications using the Software or (b) remove,\n-- delete, alter or obscure any trademarks or any copyright, trademark, patent\n-- or other intellectual property or proprietary rights notices on or in the\n-- Software, including any copy thereof. Redistributions in binary or source\n-- form must include this license and terms.\n-- \n-- THIS SOFTWARE IS PROVIDED BY ESOTERIC SOFTWARE \"AS IS\" AND ANY EXPRESS OR\n-- IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n-- MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n-- EVENT SHALL ESOTERIC SOFTWARE BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n-- SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n-- PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n-- OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-- WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n-- OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n-- ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-------------------------------------------------------------------------------\nlocal path = string.sub(..., 1, string.len(...) - string.len(\"spine-love.spine\"))\nlocal spine = {}\n\nspine.utils = require (path..\"spine-lua.utils\")\nspine.SkeletonJson = require (path..\"spine-lua.SkeletonJson\")\nspine.SkeletonData = require (path..\"spine-lua.SkeletonData\")\nspine.BoneData = require (path..\"spine-lua.BoneData\")\nspine.SlotData = require (path..\"spine-lua.SlotData\")\nspine.IkConstraintData = require (path..\"spine-lua.IkConstraintData\")\nspine.Skin = require (path..\"spine-lua.Skin\")\nspine.RegionAttachment = require (path..\"spine-lua.RegionAttachment\")\nspine.MeshAttachment = require (path..\"spine-lua.MeshAttachment\")\nspine.SkinnedMeshAttachment = require (path..\"spine-lua.SkinnedMeshAttachment\")\nspine.Skeleton = require (path..\"spine-lua.Skeleton\")\nspine.Bone = require (path..\"spine-lua.Bone\")\nspine.Slot = require (path..\"spine-lua.Slot\")\nspine.IkConstraint = require (path..\"spine-lua.IkConstraint\")\nspine.AttachmentType = require (path..\"spine-lua.AttachmentType\")\nspine.AttachmentLoader = require (path..\"spine-lua.AttachmentLoader\")\nspine.Animation = require (path..\"spine-lua.Animation\")\nspine.AnimationStateData = require (path..\"spine-lua.AnimationStateData\")\nspine.AnimationState = require (path..\"spine-lua.AnimationState\")\nspine.EventData = require (path..\"spine-lua.EventData\")\nspine.Event = require (path..\"spine-lua.Event\")\nspine.SkeletonBounds = require (path..\"spine-lua.SkeletonBounds\")\nspine.BlendMode = require (path..\"spine-lua.BlendMode\")\n\nspine.utils.readFile = function (fileName, base)\n	local path = fileName\n	if base then path = base .. '/' .. path end\n	return love.filesystem.read(path)\nend\n\nlocal json = require \"lib.spine-love.dkjson\"\nspine.utils.readJSON = function (text)\n	return json.decode(text)\nend\n\nspine.Skeleton.failed = {} -- Placeholder for an image that failed to load.\n\nspine.Skeleton.new_super = spine.Skeleton.new\nfunction spine.Skeleton.new (objectName,skeletonData, atlasData)\n	local self = spine.Skeleton.new_super(skeletonData)\n\n	-- createImage can customize where images are found.\n	function self:createImage (attachment)\n		return love.graphics.newImage(\"res/bone/\"..objectName..\"/images/\"..attachment.name .. \".png\")\n	end\n\n	-- updateWorldTransform positions images.\n	local updateWorldTransform_super = self.updateWorldTransform\n	function self:updateWorldTransform ()\n		updateWorldTransform_super(self)\n\n		if not self.images then self.images = {} end\n		local images = self.images\n\n		if not self.attachments then self.attachments = {} end\n		local attachments = self.attachments\n\n		for i,slot in ipairs(self.drawOrder) do\n			local attachment = slot.attachment\n			if not attachment then\n				images[slot] = nil\n			elseif attachment.type == spine.AttachmentType.region then\n				local image = images[slot]\n				if image and attachments[image] ~= attachment then -- Attachment image has changed.\n					image = nil\n				end\n				if not image then -- Create new image.\n					image = self:createImage(attachment)\n					if image then\n						local imageWidth = image:getWidth()\n						local imageHeight = image:getHeight()\n						attachment.widthRatio = attachment.width / imageWidth\n						attachment.heightRatio = attachment.height / imageHeight\n						attachment.originX = imageWidth / 2\n						attachment.originY = imageHeight / 2\n					else\n						print(\"Error creating image: \" .. attachment.name)\n						image = spine.Skeleton.failed\n					end\n					images[slot] = image\n					attachments[image] = attachment\n				end\n			end\n		end\n	end\n\n	function self:draw()\n		if not self.images then self.images = {} end\n		local images = self.images\n\n		local r, g, b, a = self.r * 255, self.g * 255, self.b * 255, self.a * 255\n\n		for i,slot in ipairs(self.drawOrder) do\n			local image = images[slot]\n			if image and image ~= spine.Skeleton.failed then\n				local attachment = slot.attachment\n				local x = slot.bone.worldX + attachment.x * slot.bone.m00 + attachment.y * slot.bone.m01\n				local y = slot.bone.worldY + attachment.x * slot.bone.m10 + attachment.y * slot.bone.m11\n				local rotation = slot.bone.worldRotation + attachment.rotation\n				local xScale = slot.bone.worldScaleX + attachment.scaleX - 1\n				local yScale = slot.bone.worldScaleY + attachment.scaleY - 1\n				if self.flipX then\n					xScale = -xScale\n					rotation = -rotation\n				end\n				if self.flipY then\n					yScale = -yScale\n					rotation = -rotation\n				end\n				love.graphics.setColor(r * slot.r, g * slot.g, b * slot.b, a * slot.a)\n				if slot.data.blendMode == spine.BlendMode.normal then\n					love.graphics.setBlendMode(\"alpha\")\n				elseif slot.data.blendMode == spine.BlendMode.additive then\n					love.graphics.setBlendMode(\"additive\")\n				elseif slot.data.blendMode == spine.BlendMode.multiply then\n					love.graphics.setBlendMode(\"multiply\")\n				elseif slot.data.blendMode == spine.BlendMode.screen then\n					love.graphics.setBlendMode(\"screen\")\n				end\n				love.graphics.draw(image, \n					self.x + x, \n					self.y - y, \n					-rotation * 3.1415927 / 180,\n					xScale * attachment.widthRatio,\n					yScale * attachment.heightRatio,\n					attachment.originX,\n					attachment.originY)\n			end\n		end\n\n		-- Debug bones.\n		if self.debugBones then\n			for i,bone in ipairs(self.bones) do\n				local xScale\n				local yScale\n				local rotation = -bone.worldRotation\n\n				if self.flipX then\n					xScale = -1\n					rotation = -rotation\n				else \n					xScale = 1\n				end\n\n				if self.flipY then\n					yScale = -1\n					rotation = -rotation\n				else\n					yScale = 1\n				end\n\n				love.graphics.push()\n				love.graphics.translate(self.x + bone.worldX, self.y - bone.worldY)\n				love.graphics.rotate(rotation * 3.1415927 / 180)\n				love.graphics.scale(xScale, yScale)\n				love.graphics.setColor(255, 0, 0)\n				love.graphics.line(0, 0, bone.data.length, 0)\n				love.graphics.setColor(0, 255, 0)\n				love.graphics.circle('fill', 0, 0, 3)\n				love.graphics.pop()\n			end\n		end\n\n		-- Debug slots.\n		if self.debugSlots then\n			love.graphics.setColor(0, 0, 255, 128)\n			for i,slot in ipairs(self.drawOrder) do\n				local attachment = slot.attachment\n				if attachment and attachment.type == spine.AttachmentType.region then\n					local x = slot.bone.worldX + attachment.x * slot.bone.m00 + attachment.y * slot.bone.m01\n					local y = slot.bone.worldY + attachment.x * slot.bone.m10 + attachment.y * slot.bone.m11\n					local rotation = slot.bone.worldRotation + attachment.rotation\n					local xScale = slot.bone.worldScaleX + attachment.scaleX - 1\n					local yScale = slot.bone.worldScaleY + attachment.scaleY - 1\n					if self.flipX then\n						xScale = -xScale\n						rotation = -rotation\n					end\n					if self.flipY then\n						yScale = -yScale\n						rotation = -rotation\n					end\n					love.graphics.push()\n					love.graphics.translate(self.x + x, self.y - y)\n					love.graphics.rotate(-rotation * 3.1415927 / 180)\n					love.graphics.scale(xScale, yScale)\n					love.graphics.rectangle('line', -attachment.width / 2, -attachment.height / 2, attachment.width, attachment.height)\n					love.graphics.pop()\n				end\n			end\n		end\n	end\n\n	return self\nend\n\nfunction spine.newActor(name,x,y,rot,scale)\n	local json = spine.SkeletonJson.new()\n	json.scale = scale\n	local skeletonData = json:readSkeletonDataFile(\"res/bone/boy/spineboy.json\")\n	local skeleton = spine.Skeleton.new(\"boy\",skeletonData)\n\n	skeleton.x = x\n	skeleton.y = y\n\n	skeleton:setToSetupPose()\n\n	local stateData = spine.AnimationStateData.new(skeletonData)\n	spine.AnimationState.new(stateData)\n\nend\n\nreturn spine\n",
			"file": "lib/spine-love/spine.lua",
			"file_size": 8903,
			"file_write_time": 131087840835003360,
			"settings":
			{
				"buffer_size": 9283,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					""
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"Run"
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"Love2D"
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"ldoc: File"
				],
				[
					"Packages/Lua Love/LuaLove.sublime-build",
					"ldoc: Project"
				]
			],
			[
				"Packages/Lua Love/LuaLove.sublime-build",
				"Love2D"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "ins",
		"selected_items":
		[
			[
				"ins",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Add Channel"
			],
			[
				"",
				"Build: Run"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 140.0,
		"history":
		[
			"Love2D",
			"love2d",
			"build",
			"Build",
			"Love2D",
			"Love2d",
			"love2d",
			"build"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/F/Love2D Project/FunnyFunky",
		"/F/Love2D Project/FunnyFunky/lib",
		"/F/Love2D Project/FunnyFunky/lib/spine-love",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua",
		"/F/Love2D Project/FunnyFunky/scene"
	],
	"file_history":
	[
		"/C/Users/Alexar/Desktop/test/skeleton.atlas",
		"/C/Users/Alexar/Desktop/AtlasImporter.lua",
		"/F/Love2D Project/FunnyFunky/spineAtlasLoader.lua",
		"/F/Love2D Project/FunnyFunky/res/bone/boy/spineboy.json",
		"/C/Program Files (x86)/Sublime Text 3/Data/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Program Files (x86)/Sublime Text 3/Data/Packages/User/Pretty JSON.sublime-settings",
		"/C/Program Files (x86)/Sublime Text 3/Data/Packages/Pretty JSON/Pretty JSON.sublime-settings",
		"/C/Program Files (x86)/Sublime Text 3/Data/Packages/User/Default (Windows).sublime-keymap",
		"/C/Program Files (x86)/Sublime Text 3/Data/Packages/User/Preferences.sublime-settings",
		"/C/Users/Alexar/Desktop/spine-love/main.lua",
		"/F/Love2D Project/FunnyFunky/scene/inter.lua",
		"/F/Love2D Project/FunnyFunky/cls/stage.lua",
		"/F/Love2D Project/FunnyFunky/cls/object.lua",
		"/F/Love2D Project/FunnyFunky/scene/game.lua",
		"/F/Love2D Project/pixelRace/scenes/help.lua",
		"/F/Love2D Project/FunnyFunky/lib/input.lua",
		"/F/Love2D Project/FunnyFunky/lib/delay.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua/BoundingBoxAttachment.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua/MeshAttachment.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua/Skeleton.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua/SkeletonBounds.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-love/spine.lua",
		"/F/Love2D Project/FunnyFunky/main.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua/SkeletonJson.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua/SkinnedMeshAttachment.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua/SlotData.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua/utils.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua/AttachmentLoader.lua",
		"/F/Love2D Project/FunnyFunky/lib/spine-lua/RegionAttachment.lua",
		"/F/Love2D Project/box2d/libs/loveframes/objects/base.lua",
		"/F/Love2D Project/FunnyFunky/conf.lua",
		"/F/Love2D Project/pixelRace/main.lua",
		"/F/Love2D Project/pixelRace/conf.lua",
		"/F/Love2D Project/box2d/editor/box2dhelper/draw.lua",
		"/F/Love2D Project/box2d/main.lua",
		"/F/Love2D Project/pixelRace/render.lua",
		"/F/Love2D Project/spaceship/lib/vrld-HardonCollider-79c3d0a/init.lua",
		"/F/Love2D Project/colacola/main.lua",
		"/F/Love2D Project/box2d/modes/createMode.lua",
		"/F/Love2D Project/box2d/editor/editor.lua",
		"/F/Love2D Project/box2d/libs/util.lua",
		"/F/Love2D Project/box2d/editor/interface.lua",
		"/F/Love2D Project/box2d/ui/viewMenu.lua",
		"/F/Love2D Project/box2d/feature",
		"/F/Love2D Project/box2d/todo",
		"/F/Love2D Project/box2d/editor/system.lua",
		"/F/Love2D Project/cell life/scr/game/cell.lua",
		"/C/Users/Alexar/AppData/Local/Temp/Rar$DIa0.872/main.lua",
		"/C/Users/Alexar/AppData/Local/Temp/Rar$DIa0.418/ak.lua",
		"/F/Love2D Project/box2d/modes/shapeMode.lua",
		"/F/Love2D Project/box2d/modes/jointMode.lua",
		"/F/Love2D Project/box2d/editor/box2dhelper/system.lua",
		"/F/Love2D Project/box2d/editor/softbody.lua",
		"/F/Love2D Project/box2d/editor/bg.lua",
		"/F/Love2D Project/bone/gui/button.lua",
		"/C/Users/Alexar/AppData/Local/Temp/Rar$DIa0.002/main.lua",
		"/F/Love2D Project/box2d/conf.lua",
		"/F/Love2D Project/box2d/editor/box2dhelper/reaction.lua",
		"/F/Love2D Project/box2d/editor/box2dhelper/materials.lua",
		"/F/Love2D Project/box2d/editor/camera.lua",
		"/F/Love2D Project/box2d/modes/testMode.lua",
		"/F/Love2D Project/box2d/editor/editor/editor.lua",
		"/F/Love2D Project/box2d/ui/system.lua",
		"/F/Love2D Project/box2d/editor/selector.lua",
		"/C/Users/Alexar/AppData/Local/Temp/Rar$DIa0.936/grid.lua",
		"/F/Love2D Project/box2d/editor/units.lua",
		"/C/Users/Alexar/Desktop/luagl/main.lua",
		"/F/Love2D Project/box2d/ui/property.lua",
		"/F/Love2D Project/box2d/editor/box2dhelper/data.lua",
		"/F/Love2D Project/box2d/modes/bodyMode.lua",
		"/F/Love2D Project/box2d/ui/unit.lua",
		"/F/Love2D Project/box2d/ui/history.lua",
		"/F/Love2D Project/box2d/editor/box2dhelper/init.lua",
		"/F/Love2D Project/box2d/ui/scene.lua",
		"/C/Users/Alexar/AppData/Roaming/LOVE/box2d/abc.proj",
		"/F/Love2D Project/box2d/libs/loveframes/objects/frame.lua",
		"/F/Love2D Project/box2d/editor/log.lua",
		"/F/Love2D Project/box2d/editor/keyconf.lua",
		"/F/Love2D Project/box2d/libs/loveframes/objects/tabs.lua",
		"/F/Love2D Project/box2d/ui/editMenu.lua",
		"/C/Users/Alexar/AppData/Roaming/LOVE/box2d/abc/units/test.lua",
		"/F/Love2D Project/box2d/editor/box2dhelper/collision.lua",
		"/F/Love2D Project/box2d/editor/box2dhelper/editor/box2dhelper/reaction.lua",
		"/F/Love2D Project/box2d/editor/materials.lua",
		"/F/Love2D Project/box2d/ui/ui/property.lua",
		"/F/Love2D Project/box2d/libs/loveframes/objects/grid.lua",
		"/F/Love2D Project/tetris/main.lua",
		"/F/Love2D Project/box2d/ui/fileMenu.lua",
		"/F/Love2D Project/box2d/ui/help.lua",
		"/F/Love2D Project/box2d/libs/loveframes/objects/text.lua",
		"/F/Love2D Project/box2d/libs/loveframes/init.lua",
		"/F/Love2D Project/box2d/ui/world.lua",
		"/F/Love2D Project/box2d/ui/info.lua",
		"/C/Program Files (x86)/Sublime Text 3/Data/Packages/Default/Preferences.sublime-settings",
		"/F/Love2D Project/box2d/libs/loveframes/skins/Blue/skin.lua",
		"/F/Love2D Project/box2d/ui/system2.lua",
		"/F/Love2D Project/box2d/ui/layoutMenu.lua",
		"/F/Love2D Project/box2d/libs/loveframes/objects/menu.lua",
		"/F/Love2D Project/box2d/libs/loveframes/objects/internal/menuoption.lua",
		"/F/Love2D Project/box2d/ui/joint.lua",
		"/F/Love2D Project/box2d/ui/build.lua",
		"/F/Love2D Project/box2d/ui/about.lua",
		"/F/Love2D Project/box2d/ui/aboutFrame.lua",
		"/F/Love2D Project/box2d/ui/unitframe.lua",
		"/F/Love2D Project/box2d/ui/worldFrame.lua",
		"/F/Love2D Project/box2d/ui/historyFrame.lua",
		"/F/Love2D Project/box2d/ui/buildFrame.lua",
		"/F/Love2D Project/box2d/ui/systemFrame.lua",
		"/F/Love2D Project/box2d/ui/propertyFrame.lua",
		"/F/Love2D Project/box2d/libs/bloom.lua",
		"/C/Users/Alexar/AppData/Local/Temp/Rar$DIa0.790/main.lua",
		"/C/Users/Alexar/AppData/Local/Temp/Rar$DIa0.015/luagl.h",
		"/C/Users/Alexar/AppData/Local/Temp/Rar$DIa0.826/luaglu.h",
		"/F/Love2D Project/pixelRace/scenes/inter.lua",
		"/F/Love2D Project/pixelRace/libs/gamestate.lua",
		"/F/Love2D Project/box2d/editor/b2dhelper.lua",
		"/F/Love2D Project/box2d/editor/box2dhelper/collisionFunc.lua",
		"/F/Love2D Project/box2d/editor/box2dhelper/collide.lua",
		"/C/Users/Alexar/Desktop/love编译工具/compile.lua",
		"/F/Love2D Project/box2d/libs/loveframes/libraries/utf8.lua",
		"/F/Love2D Project/box2d/editor/reactionFunc.lua",
		"/F/Love2D Project/box2d/editor/collisionFunc.lua",
		"/F/Love2D Project/box2d/libs/delaunay.lua",
		"/F/Love2D Project/box2d/[string \"boot.lua\"]",
		"/F/Love2D Project/box2d/temp",
		"/F/Love2D Project/box2d/temp2",
		"/F/Love2D Project/box2d/modes/fixtureMode.lua",
		"/F/Love2D Project/box2d/modes/modes/shapeMode.lua"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"group",
			"atlas",
			"ctrl+alt+j",
			"require",
			"bloom",
			"pres",
			"pixele",
			"centerfi",
			"setuser",
			"setUserData",
			"userdata",
			"fixture",
			"self.action",
			"setprop",
			"onclose",
			"setmaterial",
			"create",
			"self:remove()",
			"self.remove()",
			"remove",
			"setvisible",
			"ondrag",
			"fire",
			"clamp",
			"helper",
			"explo",
			"category",
			"print",
			"self.tab",
			"print",
			"testMode",
			"meter",
			"unit",
			"file",
			"menu",
			"images",
			"skin.images",
			"menu",
			"interface",
			"v.",
			"tag",
			"interface",
			"print",
			"addBody",
			"addPreserve",
			"updatePreserve",
			"explosion",
			"helper.world",
			"frag",
			"helper.todo",
			"todo",
			"update",
			"ADD",
			"default",
			"helper",
			"update",
			"add",
			"helper",
			"target",
			"fixtureIndex",
			"targettype",
			"count",
			"getUserData",
			"world",
			"clear",
			"self.mode",
			"vertMode",
			"editMode",
			"\"Test Mode\"",
			"\"Vertex Mode\"",
			"\"Joint Mode\"",
			"\"Fixture Mode\"",
			"\"Create Mode\"",
			"\"Edit Mode\"",
			"toggleBodyType",
			"gear",
			"local function CreateGear(segments)\n	segments = segments or 40\n	local vertices = {}\n	table.insert(vertices, {0, 0})\n	for i=0, segments do\n		local angle = (i / segments) * math.pi * 2\n		local x = math.cos(angle)+(i%2)*math.cos(angle)*0.7\n		local y = math.sin(angle)+(i%2)*math.sin(angle)*0.7\n		table.insert(vertices, {x, y})\n	end\n	return love.graphics.newMesh(vertices, \"fan\")\nend\n\n\nlocal gearShape = CreateGear(20)",
			"b:SetSize(70,10)",
			"b:SetSize(80,10)",
			"b:SetSize(50,10)",
			"cate",
			"print",
			"end",
			"creator",
			"vertex",
			"require",
			"about",
			" --",
			"utf8unicode",
			"print",
			"self.propTagIndex",
			"toggle",
			"tag",
			"self.action",
			"preview",
			"print",
			"setpos",
			"focus",
			"hover",
			"button",
			"rest",
			"mousetest",
			"editor",
			"polygon",
			"polygonr",
			"editor.objects",
			"self.action",
			"creator",
			"mouseTest",
			"self.action",
			"editor",
			"inrect",
			"editor",
			"mouseY",
			"mouseX",
			"love",
			"editor",
			"unpdatePopValue",
			"print",
			"remove",
			"anchors",
			"group[joint.bodies[2]].body",
			"group[joint.bodies[1]].body",
			"downForce",
			"print",
			"test",
			"ineditmod",
			"self.pause"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"--setUserData",
			"editor.action",
			"self:hide()",
			"scene",
			"edit",
			"world",
			"unit",
			"system",
			"data.",
			"tType",
			"property",
			"joint",
			"history",
			"help",
			"build",
			"about",
			"helper.system.todo",
			"system",
			"helper.system.update",
			"helper.system.add",
			"reactMode",
			"collMode",
			"dataMode",
			"drawMode",
			"mod",
			"data",
			"verts",
			"self.state",
			"shapeMode",
			"bodyMode",
			"\"test\"",
			"\"shape\"",
			"\"joint\"",
			"\"fixture\"",
			"\"create\"",
			"\"body\"",
			"b:SetSize(75,10)",
			"b:SetSize(70,10)",
			"b:SetSize(80,10)",
			"jMode",
			"editor.action",
			"units",
			"test",
			"system",
			"editor.action",
			"createMode",
			"editor.action",
			"edit",
			"selector",
			"editor.mouseY",
			"editor.mouseX",
			"editor",
			"creator",
			"Anchors",
			"group[joint.Bodies[2]].body",
			"group[joint.Bodies[1]].body",
			"self.inEditMode",
			"dragSelecting",
			"dragMoving",
			"drag",
			"obj",
			"j",
			"a",
			"dist",
			"flower",
			"weatherIndex",
			"game",
			"snow",
			"moon",
			"stageSize/2",
			"stageSize",
			"fg",
			"draw",
			"init",
			"outer",
			"polygon",
			"rect",
			":getGrid",
			"self.world",
			"left",
			"type=",
			"flag",
			"dual",
			"accelerate",
			"self:getLast",
			"drift",
			"getTarget(obj)",
			"pursue",
			"rnd",
			"std_speed",
			"gamestate",
			"shell[].",
			"spark",
			"back",
			"3000",
			"50",
			"",
			"50",
			"",
			"ky",
			"kx",
			"self.last",
			"setAngle",
			"Polygon",
			"right",
			"left",
			"fixture",
			"setRestitution",
			"right",
			"left2",
			"p",
			"right",
			"*4",
			"*8",
			"self.",
			"keyboard.",
			"self.",
			"frame",
			"slots",
			"isHover",
			"down",
			"60",
			"needConfirm",
			"cmd",
			"info",
			"deckEditor.",
			"",
			"	{1,\""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 631,
						"regions":
						{
						},
						"selection":
						[
							[
								320,
								320
							]
						],
						"settings":
						{
							"origin_encoding": "UTF-8",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/Alexar/Desktop/test/skeleton.atlas",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6766,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "scene/game.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1589,
						"regions":
						{
						},
						"selection":
						[
							[
								329,
								364
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "lib/spine-love/spine.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9283,
						"regions":
						{
						},
						"selection":
						[
							[
								8967,
								8967
							]
						],
						"settings":
						{
							"origin_encoding": "ASCII",
							"syntax": "Packages/Lua Love/LuaLove.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5428.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 32.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 313.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/Lua Love/LuaLove.sublime-build",
	"project": "ff.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 282.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
